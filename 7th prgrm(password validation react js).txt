C folder>workshop>choose the path>enter cmd
Command prompt will open
Type the below commands:
npx create-react-app react-form-validation
cd react-form-validation
npm start

 In vs code>select folder>created folder
In src>App.js
import React, { useState } from "react";
import "./App.css";

function App() {
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
  });

  const [errors, setErrors] = useState({});
  const [submitted, setSubmitted] = useState(false);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
    setErrors({ ...errors, [e.target.name]: "" }); // Clear error on change
  };

  const validate = () => {
    const newErrors = {};

    // Required fields
    Object.entries(formData).forEach(([key, value]) => {
      if (!value.trim()) newErrors[key] = `${key} is required`;
    });

    // Email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (formData.email && !emailRegex.test(formData.email)) {
      newErrors.email = "Email is not valid";
    }

    // Username length
    if (formData.username.length < 3 || formData.username.length > 15) {
      newErrors.username = "Username must be 3-15 characters";
    }

    // Password length
    if (formData.password.length < 6 || formData.password.length > 25) {
      newErrors.password = "Password must be 6-25 characters";
    }

    // Password match
    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = "Passwords do not match";
    }

    return newErrors;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const validationErrors = validate();

    if (Object.keys(validationErrors).length === 0) {
      setSubmitted(true);
    } else {
      setSubmitted(false);
      setErrors(validationErrors);
    }
  };

  return (
    <div className="container">
      <h2>React Form Validation</h2>

      <form onSubmit={handleSubmit} noValidate>
        {["username", "email", "password", "confirmPassword"].map((field) => (
          <div
            key={field}
            className={`form-control ${errors[field] ? "error" : ""}`}
          >
            <label htmlFor={field}>
              {field === "confirmPassword"
                ? "Confirm Password"
                : field.charAt(0).toUpperCase() + field.slice(1)}
            </label>
            <input
              type={field.includes("password") ? "password" : "text"}
              name={field}
              id={field}
              value={formData[field]}
              onChange={handleChange}
            />
            {errors[field] && <small>{errors[field]}</small>}
          </div>
        ))}

        <button type="submit">Submit</button>
      </form>

      {submitted && (
        <div className="output">
          <h3>Form Output</h3>
          <p>Username: {formData.username}</p>
          <p>Email: {formData.email}</p>
          <p>Password: (Hidden)</p>
        </div>
      )}
    </div>
  );
}

export default App;

In src>App.css
.container {
  max-width: 400px;
  margin: 100px auto;
  padding: 20px;
  border-radius: 5px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  background: #fff;
  font-family: Arial, sans-serif;
}

h2, h3 {
  text-align: center;
  margin-bottom: 20px;
}

.form-control {
  margin-bottom: 15px;
  position: relative;
}

label {
  display: block;
  margin-bottom: 5px;
}

input {
  width: 100%;
  padding: 10px;
  font-size: 15px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  width: 100%;
  padding: 10px;
  background: #5cb85c;
  color: white;
  border: none;
  font-size: 16px;
  cursor: pointer;
  border-radius: 4px;
}

button:hover {
  background: #4cae4c;
}

.form-control.error input {
  border-color: red;
}

.form-control small {
  color: red;
  visibility: hidden;
  font-size: 13px;
  position: absolute;
  bottom: -18px;
  left: 0;
}

.form-control.error small {
  visibility: visible;
}

.output {
  margin-top: 20px;
  padding: 10px;
  border-top: 1px solid #ccc;
}


